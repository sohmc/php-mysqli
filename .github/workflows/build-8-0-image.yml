name: Build and Deploy - PHP 8.0 Variants
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  schedule:
    - cron: '47 9 * * *'

env:
  VERSION: '8.0/'

jobs:
  get-latest-commit:
    runs-on: ubuntu-latest
    outputs:
      new-commit: ${{ steps.compare-sha.outputs.NEWCOMMIT }}
      latest-php-sha: ${{ steps.get-latest-sha.outputs.GitCommit }}
      version: ${{ env.VERSION }}
    steps:
      - name: Inspect event
        run: |
          date
          echo "VERSION: $VERSION"
          echo "github.event.schedule: ${SCHEDULE}"
          echo "Event Name: ${GITHUB_EVENT_NAME}"
          cat ${GITHUB_EVENT_PATH}
        env:
          SCHEDULE: ${{ github.event.schedule }}

      - name: Get latest commit SHA
        id: get-latest-sha
        run: |
          curl -kL -o php.json https://github.com/sohmc/docker-image-library-jsonizer/releases/latest/download/php
          GitCommit=$(jq -cr '.tags[0].GitCommit' php.json)
          echo GitCommit: ${GitCommit}
          echo "GitCommit=$GitCommit" >> $GITHUB_OUTPUT

      - name: Compare SHAs
        id: compare-sha
        run: |
          echo Archived SHA: ${ARCHIVEDSHA}
          echo Latest SHA:   ${LATESTSHA}
          if [[ $ARCHIVEDSHA == $LATESTSHA ]]; then 
            NEWCOMMIT=false
          else
            NEWCOMMIT=true
          fi

          echo "NEWCOMMIT=$NEWCOMMIT" >> $GITHUB_OUTPUT
          echo "NEWCOMMIT=$NEWCOMMIT"
        env:
          ARCHIVEDSHA: ${{ vars.PHP_80_COMMIT_SHA }}
          LATESTSHA: ${{ steps.get-latest-sha.outputs.GitCommit }}

  trigger-build:
    if: ( needs.get-latest-commit.outputs.new-commit == 'true' && github.event_name == 'schedule' ) || startsWith(github.event.head_commit.message, 'FORCE_BUILD=TRUE')
    needs: get-latest-commit
    uses: ./.github/workflows/multi-platform-build.yml
    secrets: inherit
    with:
      version: ${{ needs.get-latest-commit.outputs.version }}

  store-php-sha:
    runs-on: ubuntu-latest
    needs: [trigger-build, get-latest-commit]
    steps:
      - name: Store SHA in Github Variable
        run: |
          echo docker-library/official-images SHA: ${SHA}
          echo github repository: ${GITHUB_REPOSITORY}
          gh api --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${GITHUB_REPOSITORY}/actions/variables/PHP_80_COMMIT_SHA \
            -f name='PHP_80_COMMIT_SHA' \
            -f value="${SHA}"
        env:
          GH_TOKEN: ${{ secrets.TOKEN_FOR_ACTIONS }}
          SHA: ${{ needs.get-latest-commit.outputs.latest-php-sha }}
