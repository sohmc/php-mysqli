name: Build Images for a given variant

on:
  workflow_call:
    inputs:
      variant:
        type: string
        required: true
    outputs:
      architectures: 
        description: architectures that the variant supports
        value: ${{ jobs.get-architectures.outputs.architectures }}
      tags:
        description: All tags registered with the variant
        value: ${{ jobs.merge-images.outputs.all_tags }}

jobs:
  get-architectures:
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.get-architectures.outputs.architectures }}
    steps:
      - name: Get Architectures for ${{ inputs.variant }}
        id: get-architectures
        run: |
          curl -kL -o php.json https://github.com/sohmc/docker-image-library-jsonizer/releases/download/latest/php
          echo VARIANT: ${{ inputs.variant }}
          ARCHITECTURES=$(jq -cr --arg VARIANT ${{ inputs.variant }} '.tags[] | select(.Directory == $VARIANT).Architectures' php.json)
          echo "Architectures: ${ARCHITECTURES}"
          echo "architectures=$ARCHITECTURES" >> $GITHUB_OUTPUT

  build-images:
    runs-on: ubuntu-latest
    needs: get-architectures
    outputs:
      tag: ${{ steps.build_dockerfile.outputs.tag }}
    strategy:
      max-parallel: 1
      matrix:
        architectures: ${{ fromJson(needs.get-architectures.outputs.architectures) }}
        exclude:
          # Basically only allow amd64 and arm64v8
          - architectures: arm32v6
          - architectures: arm32v7
          - architectures: i386
          - architectures: ppc64le
          - architectures: s390x

    name: ${{ inputs.variant }} - ${{ matrix.architectures }} --- Build Image
    steps:
      - uses: actions/checkout@v4

      - name: Platform mapping
        id: platform-mapping
        run: |
          PLATFORM=$(jq -cr --arg ARCHITECTURE ${ARCHITECTURE} '.[$ARCHITECTURE]' ./ci/qemu-platform-map.json)
          echo "Platform: ${PLATFORM}"
          echo "platform=${PLATFORM}" >> $GITHUB_OUTPUT
        env:
          ARCHITECTURE: ${{ matrix.architectures }}

      - run: |
          echo "variant: ${VARIANT} - arch: ${ARCH} (${PLATFORM})"
        env:
          VARIANT: ${{ inputs.variant }}
          ARCH: ${{ matrix.architectures }}
          PLATFORM: ${{ steps.platform-mapping.outputs.platform }}
    
      - name: Build Dockerfile
        id: build_dockerfile
        run: |
          curl -kL -o php.json https://github.com/sohmc/docker-image-library-jsonizer/releases/download/latest/php
          echo VARIANT: ${{ inputs.variant }}
          TAG=$(jq -cr --arg VARIANT ${{ inputs.variant }} '.tags[] | select(.Directory == $VARIANT).Tags[0]' php.json)
          ALL_TAGS_CSV=$(jq -cr --arg VARIANT ${{ inputs.variant }} '.tags[] | select(.Directory == $VARIANT).Tags | map("sohmc/php-mysqli:" + .) | join(",")' php.json)
          echo "Tag: ${TAG}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "ALL_TAGS_CSV: ${ALL_TAGS_CSV}"
          echo "all_tags_csv=${ALL_TAGS_CSV}" >> $GITHUB_OUTPUT
          echo "++++ Building ${TAG} ++++"
          sed "s/{{TAG}}/$TAG/" ./ci/Dockerfile_Template > ./ci/Dockerfile
        env:
          VARIANT: ${{ inputs.variant }}

      # Multi-platform building: https://docs.docker.com/build/ci/github-actions/multi-platform/
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          tags: ${{ steps.build_dockerfile.outputs.tag }}

      - name: Set up QEMU
        if: ${{ matrix.architectures }} != 'amd64'
        id: qemu
        uses: docker/setup-qemu-action@v2
      
      - name: Show available architectures via QEMU
        if: ${{ matrix.architectures }} != 'amd64'
        run: echo ${AVAILABLE}
        env:
          AVAILABLE: ${{ steps.qemu.outputs.platforms }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: sohmc
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build the Docker image
        id: docker_image_build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ steps.platform-mapping.outputs.platform }}
          file: ./ci/Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ github.repository }},push-by-digest=true,name-canonical=true,push=true
          tags: ${{ steps.build_dockerfile.outputs.all_tags_csv }}
  
      - name: Export Digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.docker_image_build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-images:
    runs-on: ubuntu-latest
    needs: build-images
    outputs:
      all_tags: ${{ steps.get_all_tags.outputs.all_tags }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      
      - name: Get all tags for variant
        id: get_all_tags
        run: |
          curl -kL -o php.json https://github.com/sohmc/docker-image-library-jsonizer/releases/download/latest/php
          echo VARIANT: ${VARIANT}
          ALL_TAGS=$(jq -cr --arg VARIANT ${VARIANT} '.tags[] | select(.Directory == $VARIANT).Tags | map("-t " + .) | join(" ")' php.json)
          echo "All Tags: ${ALL_TAGS}"
          echo "all_tags=$ALL_TAGS" >> $GITHUB_OUTPUT
        env:
          VARIANT: ${{ inputs.variant }}          
        
      - name: Inspect Docker Image Tags
        working-directory: /tmp/digests
        run: |
          echo "All Tags: ${ALL_TAGS}"
          ls -l
          echo $(printf '${{ github.repository }}@sha256:%s ' *)
        env:
          ALL_TAGS: ${{ steps.get_all_tags.outputs.all_tags }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          tags: |
            type=raw,priority=9999,value=${{ needs.build-images.outputs.tag }}
      
      - name: Inspect Docker Meta Output
        run: |
          echo DOCKER_METADATA_OUTPUT_JSON: ${DOCKER_METADATA_OUTPUT_JSON}
          echo Inspecting ${DOCKER_METADATA_OUTPUT_BAKE_FILE}
          cat $DOCKER_METADATA_OUTPUT_BAKE_FILE
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: sohmc
          password: ${{ secrets.DOCKER_TOKEN }}
            
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --dry-run ${ALL_TAGS} \
            $(printf '${{ github.repository }}@sha256:%s ' *)
        env:
          ALL_TAGS: ${{ steps.get_all_tags.outputs.all_tags }}
      
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ github.repository }}: ${{ steps.meta.outputs.version }}   







