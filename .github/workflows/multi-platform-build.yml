name: Docker Image CI

on: 
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [building-in-docker-hub]
    paths-ignore:
    - 'README.md'
    - 'LICENSE'
  release:
    types: published
  schedule:
    # 4am every Saturday
    - cron: '0 4 * * 6'

env:
  REGISTRY_IMAGE: ${{ github.repository }}

jobs:

  php-latest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions: [base]
        varients: [alpine]
        platform: [linux/amd64, linux/arm/v7, linux/arm64]

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Build Dockerfile
        id: build_dockerfile
        run: |
          echo "VERSION: ${VERSION} - VARIENT: ${VARIENT} - PLATFORM: ${PLATFORM}"
          if [[ "$VERSION" == "base" ]]; then 
            TAG=$VARIENT
          else
            TAG=$VERSION-$VARIENT
          fi
          echo "::set-output name=tag::${TAG}"
          echo "++++ Building ${TAG} ++++"
          sed "s/{{TAG}}/$TAG/" ./ci/Dockerfile_Template > ./ci/Dockerfile
        env:
          VERSION: ${{ matrix.versions }}
          VARIENT: ${{ matrix.varients }}
          PLATFORM: ${{ matrix.platform }}

      # Multi-platform building: https://docs.docker.com/build/ci/github-actions/multi-platform/
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: ${{ env.REGISTRY_IMAGE }}:${{ steps.build_dockerfile.outputs.tag }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: sohmc
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build the Docker image
        id: docker_image_build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ matrix.platform }}
          file: ./ci/Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export Digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.docker_image_build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - php-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: ${{ env.REGISTRY_IMAGE }}:${{ steps.build_dockerfile.outputs.tag }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: sohmc
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Inspect Docker Metadata
        working-directory: /tmp/digests
        run: |
          echo ${DOCKER_METADATA_OUTPUT_JSON}
          jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON" \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)  
            
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)          
      
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}   
