name: Get Architecture for given Variant

on:
  workflow_call:
    inputs:
      variant:
        type: string
        required: true
    outputs:
      architectures: 
        description: architectures that the variant supports
        value: ${{ jobs.get-architectures.outputs.architectures }}

jobs:
  get-architectures:
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.get-architectures.outputs.architectures }}
    steps:
      - name: Get Architectures for ${{ inputs.variant }}
        id: get-architectures
        run: |
          curl -kL -o php.json https://github.com/sohmc/docker-image-library-jsonizer/releases/download/latest/php
          echo VARIANT: ${{ inputs.variant }}
          ARCHITECTURES=$(jq -cr --arg VARIANT ${{ inputs.variant }} '.[$VARIANT].architectures' php.json)
          echo "Architectures: ${ARCHITECTURES}"
          echo "architectures=$ARCHITECTURES" >> $GITHUB_OUTPUT

  build-images:
    runs-on: ubuntu-latest
    needs: get-architectures
    outputs:
      tags: ${{ steps.build_dockerfile.outputs.all_tags }}
    strategy:
      max-parallel: 1
      matrix:
        architectures: ${{ fromJson(needs.get-architectures.outputs.architectures) }}
        exclude:
          # Basically only allow amd64 and arm64v8
          - architectures: ["arm32v6","arm32v7","i386","ppc64le","s390x"]

    name: Building Image for ${{ inputs.variant }} - ${{ matrix.architectures }}
    steps:
      - uses: actions/checkout@v3

      - run: |
          echo "variant: ${VARIANT} - arch: ${ARCH}"
        env:
          VARIANT: ${{ inputs.variant }}
          ARCH: ${{ matrix.architectures }}
    
      - name: Build Dockerfile
        id: build_dockerfile
        run: |
          curl -kL -o php.json https://github.com/sohmc/docker-image-library-jsonizer/releases/download/latest/php
          echo VARIANT: ${{ inputs.variant }}
          TAG=$(jq -cr --arg VARIANT ${{ inputs.variant }} '.[$VARIANT].tags[0]' php.json)
          ALL_TAGS=$(jq -cr --arg VARIANT ${{ inputs.variant }} '.[$VARIANT].tags' php.json)
          echo "Tag: ${TAG}"
          echo "All Tags: ${ALL_TAGS}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "all_tags=${ALL_TAGS} >> $GITHUB_OUTPUT"
          echo "++++ Building ${TAG} ++++"
          sed "s/{{TAG}}/$TAG/" ./ci/Dockerfile_Template > ./ci/Dockerfile
        env:
          VARIANT: ${{ matrix.architectures }}

      # Multi-platform building: https://docs.docker.com/build/ci/github-actions/multi-platform/
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: "php-${{ steps.build_dockerfile.outputs.tag }}"
          tags: ${{ steps.build_dockerfile.outputs.tag }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: sohmc
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build the Docker image
        id: docker_image_build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ matrix.architectures }}
          file: ./ci/Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ github.repository }},push-by-digest=true,name-canonical=true,push=true
  
      - name: Export Digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.docker_image_build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-images:
    if: github.ref == 'x'
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          tags: ${{ needs.build-images.outputs.tags }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: sohmc
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Inspect Docker Metadata
        working-directory: /tmp/digests
        run: |
          echo ${DOCKER_METADATA_OUTPUT_JSON}
          ls -l
          echo $(jq -cr '.tags | map("-t " + .) | join(" ")') <<< "$DOCKER_METADATA_OUTPUT_JSON" \
            $(printf '${{ github.repository }}@sha256:%s ' *)  
            
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ github.repository }}@sha256:%s ' *)          
      
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ github.repository }}:${{ steps.meta.outputs.version }}   







